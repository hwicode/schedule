name: Java staging CD with GCP

on:
  push:
    branches:
      - main
  workflow_dispatch:
  
defaults:
  run:
    working-directory: ./_schedule/schedule
    
jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - uses: 'actions/checkout@v4'

    - name: JDK 11 설치
      uses: actions/setup-java@v4
      with:
        java-version: '11'
        distribution: 'temurin'

    - name: gradlew 실행 권한 추가
      run: chmod +x gradlew

    - name: MySQL과 Redis 설치 및 실행
      run: |
        cd docker
        docker compose -f docker-compose-local.yml up -d

    - name: 프로젝트 빌드
      run: |
        echo ${{ secrets.APPLICATION }} | base64 --decode > ./src/main/resources/application.yml 
        ./gradlew clean build

    - name: 빌드 폴더 업로드
      uses: actions/upload-artifact@v4
      with:
        name: build-artifact
        path: ./build/*
        retention-days: 1

    - name: 도커 허브 로그인
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
          
    - name: 도커 이미지 생성
      run: |
        docker build -t ${{ secrets.DOCKER_REGISTRY_NAME }}:$GITHUB_SHA .
        docker tag ${{ secrets.DOCKER_REGISTRY_NAME }}:$GITHUB_SHA ${{ secrets.DOCKER_REGISTRY_NAME }}:latest
          
    - name: 도커 레포지토리로 이미지 푸시
      run: |
       docker push ${{ secrets.DOCKER_REGISTRY_NAME }}:$GITHUB_SHA
       docker push ${{ secrets.DOCKER_REGISTRY_NAME }}:latest    

    - name: 배포 대상 포트/PROFILE 확인
      run: |
        response=$(curl -s -w "%{http_code}" "https://${{ secrets.DOMAIN }}:8080/deployment/strategy")
        STATUS="${response: -3}"
        BODY="${response::-3}"
        
        echo "deployment-strategy=$BODY"
        
        if [ "$STATUS" = "200" ]; then
          CURRENT_UPSTREAM="$BODY"
        else
          CURRENT_UPSTREAM="green"
        fi
        
        echo "CURRENT_UPSTREAM=$CURRENT_UPSTREAM" >> $GITHUB_ENV
        
        if [ "$CURRENT_UPSTREAM" = "blue" ]; then
          NEW_UPSTREAM="green"
        else
          NEW_UPSTREAM="blue"
        fi
        
        echo "NEW_UPSTREAM=$NEW_UPSTREAM" >> $GITHUB_ENV

    - name: new-schedule 띄움
      uses: appleboy/ssh-action@v1.1.0
      with:
        host: ${{ secrets.DOMAIN }}
        username: ${{ secrets.USERNAME }}
        key: ${{ secrets.GCP_SSH_PRIVATE_KEY }}
        script: |
          echo "${{ secrets.DOCKER_AUTH_TOKEN }}" | docker login --username "khc3796" --password-stdin
          docker pull ${{ secrets.DOCKER_REGISTRY_NAME }}
          docker logout
          docker compose -f docker-compose-${{ env.NEW_UPSTREAM }}.yml up -d

    - name: new-schedule 헬스 체크
      uses: jtalk/url-health-check-action@v3
      with:
        url: https://${{ secrets.DOMAIN  }}:8080/new-schedule
        max-attempts: 5
        retry-delay: 10s

    - name: nginx 설정 변경
      uses: appleboy/ssh-action@v1.1.0
      with:
        host: ${{ secrets.DOMAIN }}
        username: ${{ secrets.USERNAME }}
        key: ${{ secrets.GCP_SSH_PRIVATE_KEY }}
        script: |
          docker exec -i nginx bash -c 'echo "set \$service_url ${{ env.NEW_UPSTREAM }};set \$new_service_url ${{ env.CURRENT_UPSTREAM }};" > /etc/nginx/conf.d/service-env.inc && nginx -s reload'
          
    - name: 이전 schedule 제거
      uses: appleboy/ssh-action@v1.1.0
      with:
        host: ${{ secrets.DOMAIN }}
        username: ${{ secrets.USERNAME }}
        key: ${{ secrets.GCP_SSH_PRIVATE_KEY }}
        script: |
          docker stop ${{ env.CURRENT_UPSTREAM }}
          docker rm ${{ env.CURRENT_UPSTREAM }}
          docker image prune -f
